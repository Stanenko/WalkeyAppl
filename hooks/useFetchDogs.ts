import { useEffect, useState } from "react";
import { Dog, match_dogs } from "@/dogMatching";
import { useMatchingStore } from "@/store/matchingStore";

const SERVER_URL = "http://192.168.0.18:3000";

interface UserResource {
  id: string;
  breed?: string;
  weight?: number;
  age?: number;
  emotional_status?: number;
  activity_level?: number;
  latitude?: number;
  longitude?: number;
  after_walk_points?: string[];
  received_points_by_breed?: string[];
  vaccination_status?: object;
  anti_tick?: boolean;
}

interface DogInterface {
  dog_id: string;
  breed: string;
  name: string;
  weight: number;
  age: number;
  emotional_status: number;
  activity_level: number;
  latitude: number;
  longitude: number;
  similarity_percentage: number;
  status?: string;
}

const useFetchDogs = (user: UserResource | null, SERVER_URL: string) => {
  const [dogs, setDogs] = useState<DogInterface[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const { setMatching } = useMatchingStore(); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Zustand

  useEffect(() => {
    const fetchData = async () => {
      try {
        const userId = user?.id;
        if (!userId) {
          console.error("‚ùå User ID is not defined");
          return;
        }

        console.log("üì° –ó–∞–ø—Ä–æ—Å API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

        const [userResponse, userLocationResponse, dogsResponse] = await Promise.all([
          fetch(`${SERVER_URL}/api/user?clerkId=${userId}`),
          fetch(`${SERVER_URL}/api/user/location?clerkId=${userId}`),
          fetch(`${SERVER_URL}/api/users/locations?clerkId=${userId}`),
        ]);

        if (!userResponse.ok || !userLocationResponse.ok || !dogsResponse.ok) {
          console.error("üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API");
          console.log("‚ùå userResponse:", userResponse.status, await userResponse.text());
          console.log("‚ùå userLocationResponse:", userLocationResponse.status, await userLocationResponse.text());
          console.log("‚ùå dogsResponse:", dogsResponse.status, await dogsResponse.text());
          return;
        }

        const userData: UserResource = await userResponse.json();
        const userLocationData = await userLocationResponse.json();
        const dogsData: DogInterface[] = await dogsResponse.json();

        console.log("üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏:", dogsData);

        const myDog = new Dog(
          userId,
          userData.breed || "unknown",
          userData.weight || 10,
          userData.age || 5,
          userData.emotional_status || 5,
          userData.activity_level || 5,
          parseFloat(userLocationData.latitude),
          parseFloat(userLocationData.longitude),
          userData.after_walk_points || [],
          userData.received_points_by_breed || [],
          userData.vaccination_status || {},
          userData.anti_tick !== undefined ? userData.anti_tick : true
        );

        console.log("üê∂ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", myDog);

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ID
        const allDogs = dogsData.map((dog, index) => ({
          ...dog,
          dog_id: dog.dog_id || `generated_${index}`,
          name: dog.name || "–ë–µ–∑ –∏–º–µ–Ω–∏", // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
          similarity_percentage: dog.similarity_percentage ?? 0,
          latitude: parseFloat(dog.latitude?.toString() || "0"),
          longitude: parseFloat(dog.longitude?.toString() || "0"),
          status: dog.status ?? "–≤–¥–æ–º–∞", // ‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω
        }));        
            

        console.log(
          "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–±–∞–∫ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
          allDogs.map((dog) => ({
            name: dog.breed,
            latitude: dog.latitude,
            longitude: dog.longitude,
          }))
        );

        // ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—á–∏–Ω–≥
        const matchedDogs = match_dogs(myDog, allDogs, 500);
        console.log("‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–æ–±–∞–∫:", matchedDogs);

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º Zustand (–µ—Å–ª–∏ ID –µ—Å—Ç—å)
        matchedDogs.forEach((dog) => {
          if (dog.dog_id && typeof dog.dog_id === "string") {
            console.log(`üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—á–∏–Ω–≥ –¥–ª—è ${dog.name} (ID: ${dog.dog_id}): ${dog.similarity_percentage}%`);
            setMatching(dog.dog_id, dog.similarity_percentage);
          } else {
            console.warn(`‚ö†Ô∏è –°–æ–±–∞–∫–∞ ${dog.name} –Ω–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ dog_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          }
        });

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±–∞–∫ –≤ —Å—Ç–µ–π—Ç–µ
        setDogs(matchedDogs);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user, SERVER_URL]);

  return { dogs, loading };
};

export default useFetchDogs;
